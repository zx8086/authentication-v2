# Sequential CI/CD Pipeline for Authentication Service
# Reliable sequential execution with comprehensive testing and deployment

name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: zx8086/authentication-v2
  NODE_ENV: test
  KONG_JWT_AUTHORITY: ${{ secrets.KONG_JWT_AUTHORITY }}
  KONG_JWT_AUDIENCE: ${{ secrets.KONG_JWT_AUDIENCE }}
  KONG_JWT_KEY_CLAIM_NAME: key
  JWT_EXPIRATION_MINUTES: 15
  KONG_MODE: ${{ secrets.KONG_MODE }}
  KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_URL }}
  KONG_ADMIN_TOKEN: ${{ secrets.KONG_ADMIN_TOKEN }}
  CIRCUIT_BREAKER_TIMEOUT: 500
  CIRCUIT_BREAKER_ERROR_THRESHOLD: 50
  CIRCUIT_BREAKER_RESET_TIMEOUT: 30000
  STALE_DATA_TOLERANCE_MINUTES: 60
  HIGH_AVAILABILITY: false
  OTEL_SERVICE_NAME: authentication-service
  TELEMETRY_MODE: console
  OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.imageuri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            bun.lockb
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps

      - name: Run code quality checks
        run: |
          echo "Running Biome code quality checks..."
          bunx @biomejs/biome check .

          echo "Running TypeScript type checking..."
          bun run typecheck

      - name: Run license compliance check
        run: |
          echo "Checking for AGPL v3 and other problematic licenses..."
          bunx license-checker@latest --summary --excludePrivatePackages --excludePackages 'authentication-service@2.4.0' \
                              --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-3-Clause-Clear;ISC;BSD-2-Clause;0BSD;Unlicense;UNLICENSED;CC0-1.0;CC-BY-3.0;CC-BY-4.0;WTFPL;Python-2.0;MIT OR Apache-2.0' || {
            echo "Found dependencies with potentially problematic licenses. Generating detailed report..."
            bunx license-checker@latest --detailed --excludePrivatePackages --excludePackages 'authentication-service@2.4.0' > license-report.txt || true

            if bunx license-checker@latest --summary --excludePackages 'authentication-service@2.4.0' | grep -E "AGPL|GPL-3"; then
              echo "::error::Found AGPL/GPL-3 licensed dependencies which are not compatible"
              bunx license-checker@latest --summary --excludePackages 'authentication-service@2.4.0' | grep -E "AGPL|GPL" || true
              exit 1
            else
              echo "::notice::License check passed - no AGPL/GPL-3 dependencies detected"
            fi
          }
        continue-on-error: true

      - name: Start authentication service
        run: |
          bun run dev &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Started authentication service with PID: $SERVER_PID"

          # Wait for server to be ready
          until curl -f http://localhost:3000/health >/dev/null 2>&1; do
            echo "Waiting for server to start..."
            sleep 2
          done
          sleep 3
          echo "Authentication service is ready"

          # Verify service health
          curl -v http://localhost:3000/health || echo "Health check failed but continuing..."
        env:
          TELEMETRY_MODE: console
          CIRCUIT_BREAKER_ENABLED: true
          PROFILING_ENABLED: true

      - name: Setup test consumers
        run: |
          echo "Setting up test consumers for CI/CD testing..."
          bun run test/shared/setup-test-consumers.ts setup
        env:
          TELEMETRY_MODE: console
          CIRCUIT_BREAKER_ENABLED: true
          PROFILING_ENABLED: true

      - name: Run unit tests
        run: bun run bun:test
        env:
          TELEMETRY_MODE: console
          CIRCUIT_BREAKER_ENABLED: true
          PROFILING_ENABLED: true

      - name: Run E2E tests
        run: bunx playwright test
        env:
          API_BASE_URL: http://localhost:3000
          TELEMETRY_MODE: console
          CIRCUIT_BREAKER_ENABLED: true
          PROFILING_ENABLED: true

      - name: Run performance tests
        run: |
          echo "Running K6 performance tests..."
          bun run k6:quick
        env:
          TELEMETRY_MODE: console
          CIRCUIT_BREAKER_ENABLED: true
          K6_THRESHOLDS_NON_BLOCKING: true
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test/results/
            license-report.txt
          if-no-files-found: warn
          retention-days: 7

      - name: Stop authentication service
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping authentication service with PID: $SERVER_PID"
            kill $SERVER_PID || true
            sleep 2
            kill -9 $SERVER_PID 2>/dev/null || true
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "zx8086/cldbuild"

      - name: Extract package.json metadata
        if: github.event_name != 'pull_request'
        id: package
        run: |
          SERVICE_NAME=$(grep '"name"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_VERSION=$(grep '"version"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_DESCRIPTION=$(grep '"description"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_AUTHOR=$(grep '"author"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_LICENSE=$(grep '"license"' package.json | head -1 | cut -d'"' -f4)

          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "service-version=$SERVICE_VERSION" >> $GITHUB_OUTPUT
          echo "service-description=$SERVICE_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "service-author=$SERVICE_AUTHOR" >> $GITHUB_OUTPUT
          echo "service-license=$SERVICE_LICENSE" >> $GITHUB_OUTPUT

      - name: Extract metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          labels: |
            org.opencontainers.image.title=${{ steps.package.outputs.service-name }}
            org.opencontainers.image.description=${{ steps.package.outputs.service-description }}
            org.opencontainers.image.vendor=${{ steps.package.outputs.service-author }}
            org.opencontainers.image.licenses=${{ steps.package.outputs.service-license }}
            org.opencontainers.image.version=${{ steps.package.outputs.service-version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate build provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Run security scans
        if: github.event_name != 'pull_request'
        run: |
          echo "Running security scans..."

          # Get primary image tag
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "Scanning image: $FIRST_TAG"

          # Run Trivy vulnerability scanner
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasec/trivy:latest image --format sarif --output /workspace/trivy-results.sarif $FIRST_TAG || true
        continue-on-error: true

      - name: Upload security scan results
        if: github.event_name != 'pull_request' && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

      - name: Generate deployment summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## Sequential CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline**: Sequential execution (reliable)" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Executed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality checks (Biome + TypeScript)" >> $GITHUB_STEP_SUMMARY
          echo "- License compliance verification" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests (Bun test framework)" >> $GITHUB_STEP_SUMMARY
          echo "- E2E tests (Playwright)" >> $GITHUB_STEP_SUMMARY
          echo "- Performance tests (K6)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker build and push" >> $GITHUB_STEP_SUMMARY
          echo "- Security scanning" >> $GITHUB_STEP_SUMMARY
          echo "- Supply chain attestation" >> $GITHUB_STEP_SUMMARY
