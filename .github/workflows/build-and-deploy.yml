# Build and push Docker images for the Authentication Service

name: Build and Push Docker Image

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: zx8086/authentication-v2

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    env:
      NODE_ENV: test
      PORT: 3000
      KONG_JWT_AUTHORITY: ${{ secrets.KONG_JWT_AUTHORITY }}
      KONG_JWT_AUDIENCE: ${{ secrets.KONG_JWT_AUDIENCE }}
      KONG_JWT_KEY_CLAIM_NAME: key
      JWT_EXPIRATION_MINUTES: 15
      KONG_MODE: ${{ secrets.KONG_MODE }}
      KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_URL }}
      KONG_ADMIN_TOKEN: ${{ secrets.KONG_ADMIN_TOKEN }}
      CIRCUIT_BREAKER_ENABLED: false
      HIGH_AVAILABILITY: false
      OTEL_SERVICE_NAME: authentication-service
      TELEMETRY_MODE: console
      OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.imageuri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        timeout-minutes: 1

      - name: Setup Bun for code quality checks
        uses: oven-sh/setup-bun@v2
        timeout-minutes: 2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        timeout-minutes: 1
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        timeout-minutes: 3

      - name: Start application server for testing
        run: |
          bun run dev &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Started server with PID: $SERVER_PID"

          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/health >/dev/null 2>&1; do sleep 1; done'
          echo "Server is ready for testing"
        timeout-minutes: 2

      - name: Run unit & integration tests
        run: bun run bun:test
        timeout-minutes: 3

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        timeout-minutes: 1
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps
        timeout-minutes: 5

      - name: Run Playwright E2E tests
        run: bun run playwright:test
        timeout-minutes: 3
        env:
          API_BASE_URL: http://localhost:3000

      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: |
            test/results/playwright/
          retention-days: 30

      - name: Stop application server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping server with PID: $SERVER_PID"
            kill $SERVER_PID || true
            sleep 2
            kill -9 $SERVER_PID 2>/dev/null || true
          fi

      - name: Run Biome code quality checks
        run: bun run biome:check
        timeout-minutes: 2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        timeout-minutes: 2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 3
        with:
          driver: cloud
          endpoint: "zx8086/cldbuild"

      - name: Extract package.json metadata
        id: package
        run: |
          SERVICE_NAME=$(grep '"name"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_VERSION=$(grep '"version"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_DESCRIPTION=$(grep '"description"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_AUTHOR=$(grep '"author"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_LICENSE=$(grep '"license"' package.json | head -1 | cut -d'"' -f4)

          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "service-version=$SERVICE_VERSION" >> $GITHUB_OUTPUT
          echo "service-description=$SERVICE_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "service-author=$SERVICE_AUTHOR" >> $GITHUB_OUTPUT
          echo "service-license=$SERVICE_LICENSE" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        timeout-minutes: 2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          labels: |
            org.opencontainers.image.title=${{ steps.package.outputs.service-name }}
            org.opencontainers.image.description=${{ steps.package.outputs.service-description }}
            org.opencontainers.image.vendor=${{ steps.package.outputs.service-author }}
            org.opencontainers.image.licenses=${{ steps.package.outputs.service-license }}
            org.opencontainers.image.version=${{ steps.package.outputs.service-version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
          annotations: |
            org.opencontainers.image.title=${{ steps.package.outputs.service-name }}
            org.opencontainers.image.description=${{ steps.package.outputs.service-description }}
            org.opencontainers.image.licenses=${{ steps.package.outputs.service-license }}
            org.opencontainers.image.vendor=${{ steps.package.outputs.service-author }}
            org.opencontainers.image.version=${{ steps.package.outputs.service-version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version || github.ref_name }}
            SERVICE_NAME=${{ steps.package.outputs.service-name }}
            SERVICE_VERSION=${{ steps.package.outputs.service-version }}
            SERVICE_DESCRIPTION=${{ steps.package.outputs.service-description }}
            SERVICE_AUTHOR=${{ steps.package.outputs.service-author }}
            SERVICE_LICENSE=${{ steps.package.outputs.service-license }}

      - name: Generate build provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: License compliance check
        if: github.event_name != 'pull_request'
        run: |
          echo "Checking for AGPL v3 and other problematic licenses..."

          # Use bunx instead of npx to avoid npm deprecation warnings
          # bunx runs packages without installing them globally
          bunx license-checker@latest --summary --excludePrivatePackages --excludePackages 'authentication-service@2.4.0' \
                              --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;BSD-3-Clause-Clear;ISC;BSD-2-Clause;0BSD;Unlicense;UNLICENSED;CC0-1.0;CC-BY-3.0;CC-BY-4.0;WTFPL;Python-2.0;MIT OR Apache-2.0' || {
            echo "Found dependencies with potentially problematic licenses. Generating detailed report..."
            bunx license-checker@latest --detailed --excludePrivatePackages --excludePackages 'authentication-service@2.4.0' > license-report.txt || true

            # Specifically check for AGPL which is the main concern for Docker Scout
            if bunx license-checker@latest --summary --excludePackages 'authentication-service@2.4.0' | grep -E "AGPL|GPL-3"; then
              echo "::error::Found AGPL/GPL-3 licensed dependencies which are not compatible"
              bunx license-checker@latest --summary --excludePackages 'authentication-service@2.4.0' | grep -E "AGPL|GPL" || true
              exit 1
            else
              echo "::notice::License check passed - no AGPL/GPL-3 dependencies detected"
            fi
          }
        continue-on-error: true

      - name: Get primary tag for container scanning
        if: github.event_name != 'pull_request'
        id: image-tag
        run: |
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "primary-tag=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "Scanning image: $FIRST_TAG"

      - name: Run parallel security scans
        if: github.event_name != 'pull_request'
        timeout-minutes: 5
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "Starting parallel security scans for image: ${{ steps.image-tag.outputs.primary-tag }}"

          # Start Snyk code analysis in background
          {
            echo "Running Snyk code analysis..."
            npx --yes snyk@latest test --severity-threshold=high --sarif-file-output=snyk-code-results.sarif || {
              echo "Snyk code analysis completed with findings"
              exit 0
            }
          } &
          SNYK_CODE_PID=$!

          # Start Snyk container scan in background
          {
            echo "Running Snyk container scan..."
            npx --yes snyk@latest container test ${{ steps.image-tag.outputs.primary-tag }} \
              --severity-threshold=high --sarif-file-output=snyk-container-results.sarif || {
              echo "Snyk container scan completed with findings"
              exit 0
            }
          } &
          SNYK_CONTAINER_PID=$!

          # Start Trivy scan in background
          {
            echo "Running Trivy vulnerability scanner..."
            docker run --rm -v "$PWD":/workspace \
              aquasec/trivy:0.55.2 image --format sarif --output /workspace/trivy-results.sarif \
              --timeout 3m --exit-code 0 ${{ steps.image-tag.outputs.primary-tag }} || {
              echo "Trivy scan completed with findings"
              exit 0
            }
          } &
          TRIVY_PID=$!

          # Start Docker Scout scan in background
          {
            echo "Running Docker Scout analysis..."
            docker scout cves ${{ steps.image-tag.outputs.primary-tag }} \
              --format sarif --output scout-results.sarif || {
              echo "Docker Scout scan completed with findings"
              exit 0
            }
          } &
          SCOUT_PID=$!

          # Wait for all scans to complete
          echo "Waiting for all security scans to complete..."

          wait $SNYK_CODE_PID
          echo "✓ Snyk code analysis finished"

          wait $SNYK_CONTAINER_PID
          echo "✓ Snyk container scan finished"

          wait $TRIVY_PID
          echo "✓ Trivy vulnerability scan finished"

          wait $SCOUT_PID
          echo "✓ Docker Scout analysis finished"

          echo "All parallel security scans completed successfully"
        continue-on-error: true

      - name: Upload Snyk code analysis results
        if: github.event_name != 'pull_request' && hashFiles('snyk-code-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "snyk-code-results.sarif"
        continue-on-error: true

      - name: Upload Snyk container scan results
        if: github.event_name != 'pull_request' && hashFiles('snyk-container-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "snyk-container-results.sarif"
        continue-on-error: true

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request' && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Docker Scout results
        if: github.event_name != 'pull_request' && hashFiles('scout-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "scout-results.sarif"
        continue-on-error: true

      - name: Generate security summary
        if: github.event_name != 'pull_request' && always()
        timeout-minutes: 2
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scanned Image:** \`${{ steps.image-tag.outputs.primary-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Supply Chain Attestations:** Enabled (SBOM + Provenance)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| Scan Type | Status | SARIF File |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY

          if [ -f "snyk-code-results.sarif" ]; then
            echo "| Snyk Code Analysis | Completed | snyk-code-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk Code Analysis | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "snyk-container-results.sarif" ]; then
            echo "| Snyk Container Scan | Completed | snyk-container-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk Container Scan | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "trivy-results.sarif" ]; then
            echo "| Trivy Container Scan | Completed | trivy-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Trivy Container Scan | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "scout-results.sarif" ]; then
            echo "| Docker Scout Analysis | Completed | scout-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Scout Analysis | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "license-report.txt" ]; then
            echo "| License Compliance | Failed | license-report.txt |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| License Compliance | Passed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-platform:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

      - name: Archive security scan results
        if: github.event_name != 'pull_request' && always()
        uses: actions/upload-artifact@v4
        timeout-minutes: 3
        with:
          name: security-scan-results-${{ github.run_number }}
          path: |
            *.sarif
            license-report.txt
          retention-days: 30

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f trivy_envs.txt || true
          rm -f *.sarif || true
          rm -f license-report.txt || true
        continue-on-error: true

  supply-chain-verification:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      attestations: read

    steps:
      - name: Verify supply chain attestations
        run: |
          echo "## Supply Chain Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Supply chain attestations (SBOM + Provenance) have been generated and attached to the image." >> $GITHUB_STEP_SUMMARY
          echo "These attestations can be verified using Docker Scout or cosign." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Verify with Docker Scout" >> $GITHUB_STEP_SUMMARY
          echo "docker scout attestation ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View SBOM" >> $GITHUB_STEP_SUMMARY
          echo "docker scout sbom ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY