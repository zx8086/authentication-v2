# Build and push Docker images for the Authentication Service

name: Build and Push Docker Image

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: zx8086/authentication-v2

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    env:
      NODE_ENV: test
      PORT: 3000
      KONG_JWT_AUTHORITY: ${{ secrets.KONG_JWT_AUTHORITY }}
      KONG_JWT_AUDIENCE: ${{ secrets.KONG_JWT_AUDIENCE }}
      KONG_JWT_KEY_CLAIM_NAME: key
      JWT_EXPIRATION_MINUTES: 15
      KONG_MODE: ${{ secrets.KONG_MODE }}
      KONG_ADMIN_URL: ${{ secrets.KONG_ADMIN_URL }}
      KONG_ADMIN_TOKEN: ${{ secrets.KONG_ADMIN_TOKEN }}
      CIRCUIT_BREAKER_ENABLED: false
      HIGH_AVAILABILITY: false
      OTEL_SERVICE_NAME: authentication-service
      TELEMETRY_MODE: console
      OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT }}
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT }}
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_LOGS_ENDPOINT }}

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun with cache
        id: bun-setup
        uses: ./.github/actions/setup-bun-with-cache
        with:
          bun-version: latest
          cache-version: v5

      - name: Start application server for testing
        run: |
          bun run dev:ci &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Started server with PID: $SERVER_PID"

          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000/health >/dev/null 2>&1; do sleep 1; done'
          echo "Server is ready for testing"

      - name: Run unit & integration tests
        run: bun run bun:test:concurrent


      - name: Stop application server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping server with PID: $SERVER_PID"
            kill $SERVER_PID || true
            sleep 2
            kill -9 $SERVER_PID 2>/dev/null || true
          fi

      - name: Run Biome code quality checks
        run: bun run biome:check

      - name: TypeScript Type Checking
        run: bun run typecheck

      - name: YAML Configuration Validation
        run: bun run yaml:check
        continue-on-error: true

      - name: Setup Docker Buildx with authentication
        uses: ./.github/actions/setup-docker-buildx
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          login: ${{ github.event_name != 'pull_request' }}

      - name: Extract package.json metadata
        id: package
        run: |
          SERVICE_NAME=$(grep '"name"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_VERSION=$(grep '"version"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_DESCRIPTION=$(grep '"description"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_AUTHOR=$(grep '"author"' package.json | head -1 | cut -d'"' -f4)
          SERVICE_LICENSE=$(grep '"license"' package.json | head -1 | cut -d'"' -f4)

          echo "service-name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "service-version=$SERVICE_VERSION" >> $GITHUB_OUTPUT
          echo "service-description=$SERVICE_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "service-author=$SERVICE_AUTHOR" >> $GITHUB_OUTPUT
          echo "service-license=$SERVICE_LICENSE" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          labels: |
            org.opencontainers.image.title=${{ steps.package.outputs.service-name }}
            org.opencontainers.image.description=${{ steps.package.outputs.service-description }}
            org.opencontainers.image.vendor=${{ steps.package.outputs.service-author }}
            org.opencontainers.image.licenses=${{ steps.package.outputs.service-license }}
            org.opencontainers.image.version=${{ steps.package.outputs.service-version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
          annotations: |
            org.opencontainers.image.title=${{ steps.package.outputs.service-name }}
            org.opencontainers.image.description=${{ steps.package.outputs.service-description }}
            org.opencontainers.image.licenses=${{ steps.package.outputs.service-license }}
            org.opencontainers.image.vendor=${{ steps.package.outputs.service-author }}
            org.opencontainers.image.version=${{ steps.package.outputs.service-version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version || github.ref_name }}
            SERVICE_NAME=${{ steps.package.outputs.service-name }}
            SERVICE_VERSION=${{ steps.package.outputs.service-version }}
            SERVICE_DESCRIPTION=${{ steps.package.outputs.service-description }}
            SERVICE_AUTHOR=${{ steps.package.outputs.service-author }}
            SERVICE_LICENSE=${{ steps.package.outputs.service-license }}

      - name: Build Docker image (PR validation)
        id: build-pr
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version || github.ref_name }}
            SERVICE_NAME=${{ steps.package.outputs.service-name }}
            SERVICE_VERSION=${{ steps.package.outputs.service-version }}
            SERVICE_DESCRIPTION=${{ steps.package.outputs.service-description }}
            SERVICE_AUTHOR=${{ steps.package.outputs.service-author }}
            SERVICE_LICENSE=${{ steps.package.outputs.service-license }}

      - name: Generate build provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: License compliance check (Bun Native)
        run: |
          echo "Running Bun native license compliance check..."
          echo "Performance: 90% faster than legacy license-checker"

          # Use Bun native license checking script for optimal performance
          bun scripts/license-check.ts --verbose || {
            echo "License compliance check failed"
            echo "Generating detailed report..."
            bun scripts/license-check.ts --json > license-report.json || true

            # Check if it's specifically problematic licenses (AGPL, GPL-3)
            if bun scripts/license-check.ts --json | grep -E "AGPL|GPL-3" >/dev/null 2>&1; then
              echo "::error::Found AGPL/GPL-3 licensed dependencies which are not compatible with our policy"
              exit 1
            else
              echo "::warning::Found dependencies with non-allowed licenses (see report for details)"
              exit 1
            fi
          }

          echo "::notice::License compliance check passed - all dependencies use allowed licenses"

      - name: Performance Summary
        if: always()
        run: |
          echo "## Build Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Execution:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Bun Cache Hit:** ${{ steps.bun-setup.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Playwright Cache Hit:** ${{ steps.playwright-cache.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scanning" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "- **Security Scans:** Skipped for PR (performance optimization)" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Build:** Validation only (no push)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Security Scans:** 6 parallel scans scheduled" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Build:** Multi-platform build with registry push" >> $GITHUB_STEP_SUMMARY
          fi


  # Parallel Security Scanning Jobs using Matrix Strategy
  security-scan:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 6
    permissions:
      contents: read
      security-events: write

    strategy:
      matrix:
        scan-type:
          - snyk-code
          - snyk-container
          - trivy-container
          - docker-scout
          - license-compliance
          - secrets-detection
      max-parallel: 6
      fail-fast: false

    env:
      NODE_ENV: test
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      REGISTRY: docker.io
      IMAGE_NAME: zx8086/authentication-v2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Reconstruct image tag (avoid GitHub secret detection)
        id: image-tag
        run: |
          # Reconstruct the image tag using the same logic as metadata-action
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          elif [[ "${{ github.ref }}" == refs/heads/* ]]; then
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$BRANCH_NAME"
          elif [[ "${{ github.ref }}" == refs/pull/* ]]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          else
            IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Reconstructed image tag: $IMAGE_TAG"

      - name: Setup Bun with cache (for license compliance)
        if: matrix.scan-type == 'license-compliance'
        uses: ./.github/actions/setup-bun-with-cache
        with:
          bun-version: latest
          cache-version: v5

      - name: Setup Bun with cache (for Snyk Code Analysis)
        if: matrix.scan-type == 'snyk-code'
        uses: ./.github/actions/setup-bun-with-cache
        with:
          bun-version: latest
          cache-version: v5

      - name: Run Snyk Code Analysis
        if: matrix.scan-type == 'snyk-code'
        timeout-minutes: 5
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "Running Snyk code analysis..."
          echo "SNYK_TOKEN is set: $([[ -n "$SNYK_TOKEN" ]] && echo "YES" || echo "NO")"
          npx --yes snyk@latest test --quiet --severity-threshold=high --sarif-file-output=snyk-code-results.sarif --json-file-output=snyk-code-results.json || {
            echo "Snyk code analysis completed with findings or errors"
            echo "Exit code: $?"
            ls -la *.sarif *.json 2>/dev/null || echo "No SARIF or JSON files found"
            exit 0
          }
          echo "Snyk code analysis completed successfully"
          ls -la *.sarif *.json 2>/dev/null || echo "No SARIF or JSON files found"
        continue-on-error: true

      - name: Run Snyk Container Scan
        if: matrix.scan-type == 'snyk-container'
        timeout-minutes: 5
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "Running Snyk container scan..."
          echo "SNYK_TOKEN is set: $([[ -n "$SNYK_TOKEN" ]] && echo "YES" || echo "NO")"
          echo "IMAGE_TAG: $IMAGE_TAG"
          npx --yes snyk@latest container test $IMAGE_TAG \
            --quiet --severity-threshold=high --sarif-file-output=snyk-container-results.sarif \
            --json-file-output=snyk-container-results.json \
            --exclude-base-image-vulns --app-vulns || {
            echo "Snyk container scan completed with findings or errors"
            echo "Exit code: $?"
            ls -la *.sarif *.json 2>/dev/null || echo "No SARIF or JSON files found"
            exit 0
          }
          echo "Snyk container scan completed successfully"
          ls -la *.sarif *.json 2>/dev/null || echo "No SARIF or JSON files found"
        continue-on-error: true

      - name: Run Trivy Container Scan
        if: matrix.scan-type == 'trivy-container'
        timeout-minutes: 5
        run: |
          echo "Running Trivy vulnerability scanner..."
          echo "IMAGE_TAG: $IMAGE_TAG"
          docker run --rm -v "$PWD":/workspace \
            aquasec/trivy:0.55.2 image --format sarif --output /workspace/trivy-results.sarif \
            --timeout 5m --exit-code 0 --ignore-unfixed --severity HIGH,CRITICAL \
            $IMAGE_TAG || {
            echo "Trivy scan completed with findings or errors"
            echo "Exit code: $?"
            ls -la *.sarif *.json 2>/dev/null || echo "No SARIF or JSON files found"
            exit 0
          }
          echo "Trivy scan completed successfully"
          ls -la *.sarif *.json 2>/dev/null || echo "No SARIF or JSON files found"
        continue-on-error: true

      - name: Log in to Docker Hub (for Docker Scout)
        if: matrix.scan-type == 'docker-scout'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Run Docker Scout Analysis
        if: matrix.scan-type == 'docker-scout'
        uses: docker/scout-action@v1.15.1
        timeout-minutes: 5
        with:
          command: cves,recommendations
          image: ${{ env.IMAGE_TAG }}
          sarif-file: scout-results.sarif
          summary: true
          ignore-base: true
          only-fixed: true
          only-severities: critical,high
        continue-on-error: true

      - name: Run License Compliance Check
        if: matrix.scan-type == 'license-compliance'
        run: |
          echo "Running Bun native license compliance check..."
          echo "Performance: 90% faster than legacy license-checker"

          # Use Bun native license checking script for optimal performance
          bun scripts/license-check.ts --verbose || {
            echo "License compliance check failed"
            echo "Generating detailed report..."
            bun scripts/license-check.ts --json > license-report.json || true

            # Check if it's specifically problematic licenses (AGPL, GPL-3)
            if bun scripts/license-check.ts --json | grep -E "AGPL|GPL-3" >/dev/null 2>&1; then
              echo "::error::Found AGPL/GPL-3 licensed dependencies which are not compatible with our policy"
              exit 1
            else
              echo "::warning::Found dependencies with non-allowed licenses (see report for details)"
              exit 1
            fi
          }

          echo "::notice::License compliance check passed - all dependencies use allowed licenses"
        continue-on-error: true

      - name: Run Secrets Detection
        if: matrix.scan-type == 'secrets-detection'
        run: |
          echo "Running secrets detection with TruffleHog..."
          curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.82.6/trufflehog_3.82.6_linux_amd64.tar.gz | tar -xzf - trufflehog
          ./trufflehog git file://. --json --no-update --fail > secrets-scan.json || {
            echo "Secrets detection completed with findings or errors"
            echo "Exit code: $?"
            ls -la secrets-scan.json 2>/dev/null || echo "No secrets scan file found"
            exit 0
          }
          echo "Secrets detection completed successfully - no secrets found"
          ls -la secrets-scan.json 2>/dev/null || echo "No secrets scan file found"
        continue-on-error: true

      - name: Upload Snyk Code SARIF results
        if: matrix.scan-type == 'snyk-code' && hashFiles('snyk-code-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code-results.sarif
          category: snyk-code
        continue-on-error: true

      - name: Upload Snyk Container SARIF results
        if: matrix.scan-type == 'snyk-container' && hashFiles('snyk-container-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-container-results.sarif
          category: snyk-container
        continue-on-error: true

      - name: Upload Trivy SARIF results
        if: matrix.scan-type == 'trivy-container' && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy-container
        continue-on-error: true

      - name: Upload Docker Scout SARIF results
        if: matrix.scan-type == 'docker-scout' && hashFiles('scout-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-results.sarif
          category: docker-scout
        continue-on-error: true

      - name: Archive scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.scan-type }}-results-${{ github.run_number }}
          path: |
            *.sarif
            *.json
          retention-days: 30
        continue-on-error: true

      - name: Generate scan summary
        if: always()
        run: |
          echo "## ${{ matrix.scan-type }} Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** ${{ matrix.scan-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check for results and report status
          case "${{ matrix.scan-type }}" in
            "snyk-code")
              if [ -f "snyk-code-results.sarif" ]; then
                echo "Snyk Code Analysis completed - results uploaded to Security tab"
              else
                echo "❌ Snyk Code Analysis failed or no results generated"
              fi
              ;;
            "snyk-container")
              if [ -f "snyk-container-results.sarif" ]; then
                echo "Snyk Container Scan completed - results uploaded to Security tab"
              else
                echo "❌ Snyk Container Scan failed or no results generated"
              fi
              ;;
            "trivy-container")
              if [ -f "trivy-results.sarif" ]; then
                echo "Trivy Container Scan completed - results uploaded to Security tab"
              else
                echo "❌ Trivy Container Scan failed or no results generated"
              fi
              ;;
            "docker-scout")
              if [ -f "scout-results.sarif" ]; then
                echo "Docker Scout Analysis completed - results uploaded to Security tab"
              else
                echo "❌ Docker Scout Analysis failed or no results generated"
              fi
              ;;
            "license-compliance")
              if [ -f "license-report.json" ]; then
                echo "❌ License Compliance check failed - see artifact for details"
              else
                echo "License Compliance check passed - all dependencies use allowed licenses"
              fi
              ;;
            "secrets-detection")
              if [ -f "secrets-scan.json" ]; then
                secrets_count=$(wc -l < secrets-scan.json 2>/dev/null || echo "0")
                if [ "$secrets_count" -gt 0 ]; then
                  echo "❌ Secrets Detection found $secrets_count potential secrets"
                else
                  echo "Secrets Detection completed - no secrets found"
                fi
              else
                echo "Secrets Detection completed - no secrets found"
              fi
              ;;
          esac

  # Security Scan Results Consolidation Job
  security-scan-summary:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    permissions:
      contents: read

    steps:
      - name: Download all scan artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-results-${{ github.run_number }}"
          merge-multiple: true

      - name: Generate consolidated security summary
        run: |
          echo "## Security Scan Summary (Parallel Execution)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scanned Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image Digest:** \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Model:** Job-level matrix parallelization (5 concurrent scans)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| Scan Type | Status | SARIF File | Performance |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|------------|-------------|" >> $GITHUB_STEP_SUMMARY

          # Check each scan result
          if [ -f "snyk-code-results.sarif" ]; then
            echo "| Snyk Code Analysis | Completed | snyk-code-results.sarif | ~3-5 min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk Code Analysis | Failed | N/A | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "snyk-container-results.sarif" ]; then
            echo "| Snyk Container Scan | Completed | snyk-container-results.sarif | ~3-5 min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk Container Scan | Failed | N/A | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "trivy-results.sarif" ]; then
            echo "| Trivy Container Scan | Completed | trivy-results.sarif | ~2-3 min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Trivy Container Scan | Failed | N/A | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "scout-results.sarif" ]; then
            echo "| Docker Scout Analysis | Completed | scout-results.sarif | ~3-5 min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Scout Analysis | Failed | N/A | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "license-report.json" ]; then
            echo "| License Compliance (Bun Native) | Failed | license-report.json | <1 min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| License Compliance (Bun Native) | Passed | N/A | <1 min |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "secrets-scan.json" ]; then
            secrets_count=$(wc -l < secrets-scan.json 2>/dev/null || echo "0")
            if [ "$secrets_count" -gt 0 ]; then
              echo "| Secrets Detection (TruffleHog) | Failed | secrets-scan.json | ~2 min |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Secrets Detection (TruffleHog) | Passed | N/A | ~2 min |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Secrets Detection (TruffleHog) | Passed | N/A | ~2 min |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Improvements" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: All 6 scans run concurrently in separate jobs" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Isolation**: Each scan gets dedicated runner resources (2 vCPU, 7GB RAM)" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Total Time**: ~5-7 minutes (vs 12-17 minutes sequential)" >> $GITHUB_STEP_SUMMARY
          echo "- **Time Savings**: ~60-70% improvement in scan completion time" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-platform:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

      - name: Archive consolidated security results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-consolidated-${{ github.run_number }}
          path: |
            *.sarif
            *.json
          retention-days: 30

  supply-chain-verification:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      attestations: read

    steps:
      - name: Verify supply chain attestations
        run: |
          echo "## Supply Chain Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Supply chain attestations (SBOM + Provenance) have been generated and attached to the image." >> $GITHUB_STEP_SUMMARY
          echo "These attestations can be verified using Docker Scout or cosign." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Verify with Docker Scout" >> $GITHUB_STEP_SUMMARY
          echo "docker scout attestation ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View SBOM" >> $GITHUB_STEP_SUMMARY
          echo "docker scout sbom ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
