# Build and push Docker images for the Authentication Service

name: Build and Push Docker Image

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - master

env:
  REGISTRY: docker.io
  IMAGE_NAME: zx8086/authentication

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.imageuri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        timeout-minutes: 2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        timeout-minutes: 3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        timeout-minutes: 2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        timeout-minutes: 2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
          labels: |
            org.opencontainers.image.title=Authentication Service
            org.opencontainers.image.description=High-performance JWT authentication service
            org.opencontainers.image.vendor=Example Corp
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        timeout-minutes: 10
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version || github.ref_name }}

      - name: Generate build provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Setup Bun for security scanning
        if: github.event_name != 'pull_request'
        uses: oven-sh/setup-bun@v2
        timeout-minutes: 2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        if: github.event_name != 'pull_request'
        uses: actions/cache@v4
        timeout-minutes: 2
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies for security scanning
        if: github.event_name != 'pull_request'
        run: bun install --frozen-lockfile
        timeout-minutes: 3

      - name: License compliance check
        if: github.event_name != 'pull_request'
        run: |
          echo "Checking for AGPL v3 and other problematic licenses..."

          # Clean npm cache to avoid stale data
          npm cache clean --force || true

          # Fresh install of dependencies
          rm -rf node_modules package-lock.json
          bun install --frozen-lockfile

          # Install fresh license-checker locally
          npm install --no-save license-checker

          # Check for problematic licenses, excluding our own package and allowing UNLICENSED
          npx license-checker --summary --excludePrivatePackages --excludePackages 'authentication-service@1.0.0' \
                              --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;ISC;BSD-2-Clause;0BSD;Unlicense;UNLICENSED;CC0-1.0;CC-BY-4.0;WTFPL;Python-2.0' || {
            echo "Found dependencies with potentially problematic licenses. Generating detailed report..."
            npx license-checker --detailed --excludePrivatePackages --excludePackages 'authentication-service@1.0.0' > license-report.txt || true

            # Specifically check for AGPL which is the main concern for Docker Scout
            if npx license-checker --summary --excludePackages 'authentication-service@1.0.0' | grep -E "AGPL|GPL-3"; then
              echo "::error::Found AGPL/GPL-3 licensed dependencies which are not compatible"
              npx license-checker --summary --excludePackages 'authentication-service@1.0.0' | grep -E "AGPL|GPL" || true
              exit 1
            else
              echo "::warning::License check passed - no AGPL/GPL-3 dependencies detected"
            fi
          }
        continue-on-error: true

      - name: Run Snyk code analysis
        if: github.event_name != 'pull_request'
        uses: snyk/actions/node@master
        timeout-minutes: 5
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk-code-results.sarif
        continue-on-error: true

      - name: Get primary tag for container scanning
        if: github.event_name != 'pull_request'
        id: image-tag
        run: |
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "primary-tag=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "Scanning image: $FIRST_TAG"

      - name: Run Snyk container scan
        if: github.event_name != 'pull_request'
        uses: snyk/actions/docker@master
        timeout-minutes: 8
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.image-tag.outputs.primary-tag }}
          args: --severity-threshold=high --sarif-file-output=snyk-container-results.sarif
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        timeout-minutes: 5
        with:
          image-ref: ${{ steps.image-tag.outputs.primary-tag }}
          format: "sarif"
          output: "trivy-results.sarif"
          timeout: "3m"
          exit-code: "0"
        continue-on-error: true

      - name: Docker Scout analysis
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        timeout-minutes: 5
        with:
          command: cves,recommendations,compare
          image: ${{ steps.image-tag.outputs.primary-tag }}
          sarif-file: scout-results.sarif
          summary: true
        continue-on-error: true

      - name: Upload Snyk code analysis results
        if: github.event_name != 'pull_request' && hashFiles('snyk-code-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "snyk-code-results.sarif"
        continue-on-error: true

      - name: Upload Snyk container scan results
        if: github.event_name != 'pull_request' && hashFiles('snyk-container-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "snyk-container-results.sarif"
        continue-on-error: true

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request' && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Docker Scout results
        if: github.event_name != 'pull_request' && hashFiles('scout-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        timeout-minutes: 2
        with:
          sarif_file: "scout-results.sarif"
        continue-on-error: true

      - name: Generate security summary
        if: github.event_name != 'pull_request' && always()
        timeout-minutes: 2
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scanned Image:** \`${{ steps.image-tag.outputs.primary-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Supply Chain Attestations:** Enabled (SBOM + Provenance)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| Scan Type | Status | SARIF File |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY

          if [ -f "snyk-code-results.sarif" ]; then
            echo "| Snyk Code Analysis | Completed | snyk-code-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk Code Analysis | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "snyk-container-results.sarif" ]; then
            echo "| Snyk Container Scan | Completed | snyk-container-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Snyk Container Scan | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "trivy-results.sarif" ]; then
            echo "| Trivy Container Scan | Completed | trivy-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Trivy Container Scan | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "scout-results.sarif" ]; then
            echo "| Docker Scout Analysis | Completed | scout-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Scout Analysis | Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "license-report.txt" ]; then
            echo "| License Compliance | Failed | license-report.txt |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| License Compliance | Passed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-platform:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

      - name: Archive security scan results
        if: github.event_name != 'pull_request' && always()
        uses: actions/upload-artifact@v4
        timeout-minutes: 3
        with:
          name: security-scan-results-${{ github.run_number }}
          path: |
            *.sarif
            license-report.txt
          retention-days: 30

  supply-chain-verification:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      attestations: read

    steps:
      - name: Verify supply chain attestations
        run: |
          echo "## Supply Chain Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ needs.build-and-push.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Supply chain attestations (SBOM + Provenance) have been generated and attached to the image." >> $GITHUB_STEP_SUMMARY
          echo "These attestations can be verified using Docker Scout or cosign." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Verify with Docker Scout" >> $GITHUB_STEP_SUMMARY
          echo "docker scout attestation ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View SBOM" >> $GITHUB_STEP_SUMMARY
          echo "docker scout sbom ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
