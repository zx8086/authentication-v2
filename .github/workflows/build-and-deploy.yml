# Build and push Docker images for the Authentication Service

name: Build and Push Docker Image

on:
  push:
    branches:
      - master
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: zx8086/authentication

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      primary-tag: ${{ steps.extract-tag.outputs.primary-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract primary tag for scanning
        id: extract-tag
        run: |
          # Extract the first tag from the metadata output
          TAGS='${{ steps.meta.outputs.tags }}'
          PRIMARY_TAG=$(echo "$TAGS" | head -n1 | tr -d '\n\r')
          echo "Primary tag for scanning: $PRIMARY_TAG"
          echo "primary-tag=$PRIMARY_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request' && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Snyk code analysis
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --sarif-file-output=snyk-code-results.sarif
        continue-on-error: true

      - name: Upload Snyk code analysis results to GitHub Security tab
        if: hashFiles('snyk-code-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "snyk-code-results.sarif"
        continue-on-error: true

      - name: Log in to Docker Hub for container scan
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify image availability and extract tag for scanning
        id: verify-image
        run: |
          # Use the primary tag from the build job
          PRIMARY_TAG='${{ needs.build-and-push.outputs.primary-tag }}'

          if [ -z "$PRIMARY_TAG" ]; then
            echo "ERROR: Primary tag is empty"
            exit 1
          fi

          echo "Using image tag for scanning: $PRIMARY_TAG"

          # Verify the image exists and is accessible
          echo "Verifying image accessibility..."
          if docker manifest inspect "$PRIMARY_TAG" > /dev/null 2>&1; then
            echo "✅ Image $PRIMARY_TAG is accessible"
          else
            echo "⚠️  Image manifest not immediately available, proceeding with scan anyway"
          fi

          echo "image-ref=$PRIMARY_TAG" >> $GITHUB_OUTPUT

      - name: Run Snyk container vulnerability scanner
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.verify-image.outputs.image-ref }}
          args: --severity-threshold=medium --sarif-file-output=snyk-container-results.sarif
        continue-on-error: true

      - name: Upload Snyk container scan results to GitHub Security tab
        if: hashFiles('snyk-container-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "snyk-container-results.sarif"
        continue-on-error: true

      - name: Generate security summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | SARIF File |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY

          if [ -f "snyk-code-results.sarif" ]; then
            echo "| Code Analysis | ✅ Completed | snyk-code-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Code Analysis | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "snyk-container-results.sarif" ]; then
            echo "| Container Scan | ✅ Completed | snyk-container-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Container Scan | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "trivy-results.sarif" ]; then
            echo "| Trivy Scan | ✅ Completed | trivy-results.sarif |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Trivy Scan | ❌ Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scanned Image:** \`${{ steps.verify-image.outputs.image-ref }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Archive security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            *.sarif
          retention-days: 30