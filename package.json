{
  "name": "authentication-service",
  "version": "2.4.0",
  "type": "module",
  "description": "High-performance JWT authentication service built with Bun",
  "main": "dist/server.js",
  "scripts": {
    "dev": "bun run generate-docs && bun --hot src/server.ts",
    "dev:development": "bun run generate-docs && cp .env.dev .env.development && NODE_ENV=development bun src/server.ts; rm .env.development",
    "dev:staging": "bun run generate-docs && cp .env.stg .env.staging && NODE_ENV=staging bun src/server.ts; rm .env.staging",
    "dev:production": "bun run generate-docs && cp .env.prod .env.production && NODE_ENV=production bun src/server.ts; rm .env.production",
    "start": "bun run src/server.ts",
    "build": "bun build src/server.ts --target=bun --outdir=dist --minify",
    "bun:test": "bun test",
    "bun:test:concurrent": "bun test --max-concurrency=4",
    "bun:test:randomize": "bun test --randomize",
    "bun:test:seed": "bun test --seed",
    "bun:test:types": "bun test test/bun/type-validation.test.ts",
    "bun:test:watch": "bun test --watch",
    "bun:test:coverage": "bun test --coverage",
    "bun:test:coverage-strict": "bun test --coverage --update-snapshots=false",
    "typecheck": "tsc --noEmit",
    "biome:lint": "biome lint .",
    "biome:lint:fix": "biome lint --write .",
    "biome:format": "biome format .",
    "biome:format:write": "biome format --write .",
    "biome:check": "biome check .",
    "biome:check:write": "biome check --write .",
    "biome:check:unsafe": "biome check --write --unsafe .",
    "yaml:check": "yamllint .github/workflows/*.yml",
    "lint:all": "bun run biome:check && bun run yaml:check",
    "lint:fix": "bun run typecheck && bun run biome:check:write && bun run yaml:check",
    "biome:ci": "biome ci .",
    "generate-docs": "bun scripts/generate-openapi.ts",
    "license:check": "bun scripts/license-check.ts",
    "license:check:verbose": "bun scripts/license-check.ts --verbose",
    "license:check:json": "bun scripts/license-check.ts --json",
    "license:check:strict": "bun scripts/license-check.ts --fail-on-warnings",
    "health-check": "curl -f http://localhost:3000/health || exit 1",
    "kill-server": "lsof -ti :3000 | xargs kill -9 2>/dev/null || echo 'No processes found on port 3000'",
    "dev:clean": "bun run kill-server && bun run dev",
    "docker:build": "DOCKER_BUILDKIT=1 docker build --platform linux/amd64 --provenance=false --sbom=false -t ${npm_package_name}:${npm_package_version} -t ${npm_package_name}:latest .",
    "docker:build:enhanced": "./docker-build.sh",
    "docker:security:scan": "docker scout cves ${npm_package_name}:latest",
    "docker:compose:prod": "docker-compose -f docker-compose.production.yml up -d",
    "docker:compose:down": "docker-compose -f docker-compose.production.yml down",
    "playwright:test": "playwright test",
    "playwright:ui": "playwright test --ui",
    "test:clean": "rm -rf test/results/k6/* test/results/playwright/* test/results/bun/* test-results/ playwright-report/",
    "test:suite": "bun run bun:test && bun run playwright:test && bun run k6:quick",
    "k6:smoke:health": "test/k6/run-k6.sh test/k6/smoke/health-only-smoke.ts test/results/k6/smoke-health-only-results.json false",
    "k6:smoke:metrics": "test/k6/run-k6.sh test/k6/smoke/metrics-only-smoke.ts test/results/k6/smoke-metrics-only-results.json false",
    "k6:smoke:openapi": "test/k6/run-k6.sh test/k6/smoke/openapi-only-smoke.ts test/results/k6/smoke-openapi-only-results.json false",
    "k6:smoke:tokens": "test/k6/run-k6.sh test/k6/smoke/tokens-smoke.ts test/results/k6/smoke-tokens-results.json true",
    "k6:smoke:all-endpoints": "test/k6/run-k6.sh test/k6/smoke/all-endpoints-smoke.ts test/results/k6/smoke-all-endpoints-results.json false",
    "k6:smoke:profiling": "test/k6/run-k6.sh test/k6/smoke/profiling-smoke.ts test/results/k6/smoke-profiling-results.json false",
    "k6:load": "test/k6/run-k6.sh test/k6/load/auth-load.ts test/results/k6/load-auth-results.json true",
    "k6:stress": "test/k6/run-k6.sh test/k6/stress/system-stress.ts test/results/k6/stress-system-results.json true",
    "k6:spike": "test/k6/run-k6.sh test/k6/spike/spike-test.ts test/results/k6/spike-test-results.json true",
    "k6:info": "bun run test/k6/run-all-tests.ts",
    "k6:quick": "bun run k6:smoke:health && bun run k6:smoke:tokens",
    "k6:full": "bun run k6:smoke:health && bun run k6:smoke:metrics && bun run k6:smoke:openapi && bun run k6:smoke:tokens && bun run k6:load && bun run k6:stress && bun run k6:spike",
    "docker:run:local": "docker run --rm --env-file .env -p 3000:3000 --name auth-service-local authentication-service:latest",
    "docker:run:dev": "docker run --rm --env-file .env.dev -p 3001:3000 --name auth-service-dev authentication-service:latest",
    "docker:run:staging": "docker run --rm --env-file .env.stg -p 3002:3000 --name auth-service-staging authentication-service:latest",
    "docker:run:production": "docker run -d --restart=always --env-file .env.prod -p 3000:3000 --user 65532:65532 --read-only --tmpfs /tmp:noexec,nosuid,size=100m --cap-drop=ALL --security-opt=no-new-privileges:true --name auth-service-prod authentication-service:latest",
    "docker:security:validate": "./scripts/validate-dockerfile-security.sh",
    "docker:security:hadolint": "hadolint Dockerfile --config .hadolint.yaml",
    "docker:security:hadolint:docker": "docker run --rm -i hadolint/hadolint --config /dev/stdin < .hadolint.yaml < Dockerfile",
    "docker:security:trivy": "trivy image --exit-code 1 --severity HIGH,CRITICAL authentication-service:latest",
    "docker:security:trivy:runtime": "trivy image --ignore-unfixed --severity HIGH,CRITICAL authentication-service:latest",
    "docker:security:verify:runtime": "./scripts/verify-runtime-security.sh authentication-service:latest",
    "docker:security:score": "./scripts/validate-dockerfile-security.sh && echo 'Security validation completed'",
    "docker:stop:local": "docker stop auth-service-local 2>/dev/null || true",
    "docker:stop:dev": "docker stop auth-service-dev 2>/dev/null || true",
    "docker:stop:staging": "docker stop auth-service-staging 2>/dev/null || true",
    "docker:stop:production": "docker stop auth-service-prod 2>/dev/null || true",
    "docker:local": "bun run docker:stop:local && bun run docker:build && bun run docker:run:local",
    "docker:dev": "bun run docker:stop:dev && bun run docker:build && bun run docker:run:dev",
    "docker:staging": "bun run docker:stop:staging && bun run docker:build && bun run docker:run:staging",
    "docker:production": "bun run docker:stop:production && bun run docker:build && bun run docker:security:validate && bun run docker:run:production",
    "docker:security:full": "bun run docker:security:hadolint && bun run docker:build && bun run docker:security:trivy && bun run docker:security:validate",
    "docker:optimize:build": "./scripts/docker-optimize-build.sh",
    "docker:optimize:validate": "./scripts/validate-docker-optimization.sh",
    "docker:optimize:full": "./scripts/docker-optimize-build.sh && ./scripts/validate-docker-optimization.sh",
    "redis:start": "docker run -d --name auth-redis -p 6379:6379 --restart unless-stopped redis:7-alpine redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru",
    "redis:stop": "docker stop auth-redis 2>/dev/null || true",
    "redis:remove": "docker rm auth-redis 2>/dev/null || true",
    "redis:restart": "bun run redis:stop && bun run redis:remove && bun run redis:start",
    "redis:logs": "docker logs -f auth-redis",
    "redis:cli": "docker exec -it auth-redis redis-cli",
    "redis:status": "docker ps --filter name=auth-redis --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
    "redis:setup": "bun run redis:stop && bun run redis:remove && bun run redis:start && echo 'Redis started on localhost:6379'",
    "redis:stats": "docker exec -it auth-redis redis-cli --stat",
    "redis:bigkeys": "docker exec -it auth-redis redis-cli --bigkeys",
    "redis:memkeys": "docker exec -it auth-redis redis-cli --memkeys",
    "redis:scan": "docker exec -it auth-redis redis-cli --scan | head -10",
    "redis:scan:auth": "docker exec -it auth-redis redis-cli --scan --pattern '*auth_service*'",
    "profile:start": "PROFILING_ENABLED=true bun --inspect src/server.ts",
    "profile:status": "curl -s http://localhost:3000/debug/profiling/status",
    "profile:start-session": "curl -X POST http://localhost:3000/debug/profiling/start",
    "profile:stop-session": "curl -X POST http://localhost:3000/debug/profiling/stop",
    "profile:reports": "curl -s http://localhost:3000/debug/profiling/reports",
    "profile:clean": "curl -X POST http://localhost:3000/debug/profiling/cleanup",
    "profile:dev": "NODE_ENV=development PROFILING_ENABLED=true bun --inspect src/server.ts",
    "profile:k6:load-test": "PROFILING_ENABLED=true bun src/server.ts & sleep 5 && curl -X POST http://localhost:3000/debug/profiling/start && bun run k6:load && curl -X POST http://localhost:3000/debug/profiling/stop && curl -X POST http://localhost:3000/debug/profiling/cleanup",
    "profile:k6:smoke": "PROFILING_ENABLED=true bun src/server.ts & sleep 3 && curl -X POST http://localhost:3000/debug/profiling/start && bun run k6:smoke:profiling && curl -X POST http://localhost:3000/debug/profiling/stop && curl -X POST http://localhost:3000/debug/profiling/cleanup",
    "profile:k6:stress": "PROFILING_ENABLED=true bun src/server.ts & sleep 5 && curl -X POST http://localhost:3000/debug/profiling/start && bun run k6:stress && curl -X POST http://localhost:3000/debug/profiling/stop && curl -X POST http://localhost:3000/debug/profiling/cleanup",
    "profile:help": "echo 'Profiling Commands:' && echo '  bun run profile:start          - Start server with profiling enabled and Chrome DevTools' && echo '  bun run profile:dev            - Start development server with profiling and Chrome DevTools' && echo '  bun run profile:status         - Check profiling status' && echo '  bun run profile:start-session  - Start profiling session' && echo '  bun run profile:stop-session   - Stop profiling session' && echo '  bun run profile:reports        - List available reports' && echo '  bun run profile:clean          - Clean profiling artifacts' && echo '  bun run profile:k6:smoke       - Profile K6 smoke tests' && echo '  bun run profile:k6:load-test   - Profile K6 load tests' && echo '  bun run profile:k6:stress      - Profile K6 stress tests' && echo 'Chrome DevTools: Navigate to chrome://inspect or use the Bun Inspector URL shown at startup'"
  },
  "keywords": [
    "authentication",
    "jwt",
    "kong",
    "bun",
    "typescript",
    "microservice"
  ],
  "author": "Simon Owusu",
  "license": "UNLICENSED",
  "devDependencies": {
    "@biomejs/biome": "^2.2.5",
    "@playwright/test": "^1.56.0",
    "@types/bun": "1.2.23",
    "@types/k6": "^1.3.1",
    "@types/opossum": "^8.1.9",
    "@types/redis": "^4.0.11",
    "js-yaml": "^4.1.0",
    "typescript": "^5.9.3",
    "yaml-lint": "^1.7.0"
  },
  "engines": {
    "bun": ">=1.1.35"
  },
  "bun": {
    "install": {
      "peer": true,
      "frozenLockfile": true
    },
    "build": {
      "target": "bun",
      "minify": true,
      "sourcemap": "external"
    }
  },
  "overrides": {
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/core": "^2.1.0",
    "@opentelemetry/resources": "^2.1.0",
    "@opentelemetry/sdk-metrics": "^2.1.0",
    "@opentelemetry/sdk-trace-base": "^2.1.0",
    "@opentelemetry/semantic-conventions": "^1.37.0",
    "semver": "^7.6.3",
    "protobufjs": "^7.4.0"
  },
  "resolutions": {
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/core": "^2.1.0",
    "@opentelemetry/resources": "^2.1.0",
    "@opentelemetry/sdk-metrics": "^2.1.0",
    "@opentelemetry/sdk-trace-base": "^2.1.0",
    "@opentelemetry/semantic-conventions": "^1.37.0",
    "semver": "^7.6.3",
    "protobufjs": "^7.4.0"
  },
  "dependencies": {
    "@elastic/ecs-winston-format": "^1.5.3",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/api-logs": "^0.206.0",
    "@opentelemetry/auto-instrumentations-node": "^0.65.0",
    "@opentelemetry/core": "^2.1.0",
    "@opentelemetry/exporter-logs-otlp-http": "^0.206.0",
    "@opentelemetry/exporter-metrics-otlp-http": "^0.206.0",
    "@opentelemetry/exporter-otlp-http": "^0.26.0",
    "@opentelemetry/exporter-trace-otlp-http": "^0.206.0",
    "@opentelemetry/host-metrics": "^0.36.2",
    "@opentelemetry/instrumentation-fetch": "^0.206.0",
    "@opentelemetry/instrumentation-http": "^0.206.0",
    "@opentelemetry/instrumentation-redis": "^0.55.0",
    "@opentelemetry/instrumentation-winston": "^0.51.0",
    "@opentelemetry/resources": "^2.1.0",
    "@opentelemetry/sdk-logs": "^0.206.0",
    "@opentelemetry/sdk-metrics": "^2.1.0",
    "@opentelemetry/sdk-node": "^0.206.0",
    "@opentelemetry/sdk-trace-base": "^2.1.0",
    "@opentelemetry/semantic-conventions": "^1.37.0",
    "@opentelemetry/winston-transport": "^0.17.0",
    "opossum": "^9.0.0",
    "redis": "^5.8.3",
    "winston": "^3.18.3",
    "winston-transport": "^4.9.0",
    "zod": "^4.1.12"
  },
  "trustedDependencies": [
    "protobufjs"
  ]
}
