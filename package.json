{
  "name": "authentication-service",
  "version": "2.3.0",
  "type": "module",
  "description": "Authentication Service",
  "main": "dist/server.js",
  "scripts": {
    "dev": "bun run generate-docs && bun src/server.ts",
    "dev:development": "bun run generate-docs && cp .env.dev .env.development && NODE_ENV=development bun src/server.ts; rm .env.development",
    "dev:staging": "bun run generate-docs && cp .env.stg .env.staging && NODE_ENV=staging bun src/server.ts; rm .env.staging",
    "dev:production": "bun run generate-docs && cp .env.prod .env.production && NODE_ENV=production bun src/server.ts; rm .env.production",
    "start": "bun run src/server.ts",
    "build": "bun run generate-docs && bun build src/server.ts --target=bun --outdir=dist --minify",
    "bun:test": "bun test",
    "bun:test:watch": "bun test --watch",
    "bun:test:coverage": "bun test --coverage",
    "typecheck": "tsc --noEmit",
    "biome:lint": "biome lint .",
    "biome:lint:fix": "biome lint --write .",
    "biome:format": "biome format .",
    "biome:format:write": "biome format --write .",
    "biome:check": "biome check .",
    "biome:check:write": "biome check --write .",
    "biome:check:unsafe": "biome check --write --unsafe .",
    "biome:ci": "biome ci .",
    "generate-docs": "bun scripts/generate-openapi.ts",
    "generate-docs:json": "bun scripts/generate-openapi.ts --format json",
    "generate-docs:yaml": "bun scripts/generate-openapi.ts --format yaml",
    "generate-docs:verbose": "bun scripts/generate-openapi.ts --verbose",
    "health-check": "curl -f http://localhost:3000/health || exit 1",
    "kill-server": "lsof -ti :3000 | xargs kill -9 2>/dev/null || echo 'No processes found on port 3000'",
    "dev:clean": "bun run kill-server && bun run dev",
    "docker:build": "docker build -t simple-api-service .",
    "playwright:test": "playwright test",
    "playwright:ui": "playwright test --ui",
    "test:clean": "rm -rf test/results/k6/* test/results/playwright/* test/results/bun/* test-results/ playwright-report/",
    "k6:smoke:health": "test/k6/run-k6.sh test/k6/smoke/health-only-smoke.ts test/results/k6/smoke-health-only-results.json false",
    "k6:smoke:metrics": "test/k6/run-k6.sh test/k6/smoke/metrics-only-smoke.ts test/results/k6/smoke-metrics-only-results.json false",
    "k6:smoke:openapi": "test/k6/run-k6.sh test/k6/smoke/openapi-only-smoke.ts test/results/k6/smoke-openapi-only-results.json false",
    "k6:smoke:tokens": "test/k6/run-k6.sh test/k6/smoke/tokens-smoke.ts test/results/k6/smoke-tokens-results.json true",
    "k6:smoke:all-endpoints": "test/k6/run-k6.sh test/k6/smoke/health-smoke.ts test/results/k6/smoke-all-endpoints-results.json false",
    "k6:load": "test/k6/run-k6.sh test/k6/load/auth-load.ts test/results/k6/load-auth-results.json true",
    "k6:stress": "test/k6/run-k6.sh test/k6/stress/system-stress.ts test/results/k6/stress-system-results.json true",
    "k6:spike": "test/k6/run-k6.sh test/k6/spike/spike-test.ts test/results/k6/spike-test-results.json true",
    "k6:info": "bun run test/k6/run-all-tests.ts"
  },
  "keywords": [
    "authentication",
    "jwt",
    "kong",
    "bun",
    "typescript",
    "microservice"
  ],
  "author": "Simon Owusu",
  "license": "UNLICENSED",
  "devDependencies": {
    "@biomejs/biome": "^2.2.5",
    "@playwright/test": "^1.56.0",
    "@types/bun": "1.2.23",
    "@types/k6": "^1.3.1",
    "typescript": "^5.9.3"
  },
  "engines": {
    "bun": ">=1.1.35"
  },
  "bun": {
    "install": {
      "peer": true,
      "frozenLockfile": true
    },
    "build": {
      "target": "bun",
      "minify": true,
      "sourcemap": "external"
    }
  },
  "overrides": {
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/core": "^2.1.0",
    "@opentelemetry/resources": "^2.1.0",
    "@opentelemetry/sdk-metrics": "^2.1.0",
    "@opentelemetry/sdk-trace-base": "^2.1.0",
    "@opentelemetry/semantic-conventions": "^1.37.0",
    "semver": "^7.6.3",
    "protobufjs": "^7.4.0"
  },
  "resolutions": {
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/core": "^2.1.0",
    "@opentelemetry/resources": "^2.1.0",
    "@opentelemetry/sdk-metrics": "^2.1.0",
    "@opentelemetry/sdk-trace-base": "^2.1.0",
    "@opentelemetry/semantic-conventions": "^1.37.0",
    "semver": "^7.6.3",
    "protobufjs": "^7.4.0"
  },
  "dependencies": {
    "@elastic/ecs-winston-format": "^1.5.3",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/api-logs": "^0.206.0",
    "@opentelemetry/auto-instrumentations-node": "^0.65.0",
    "@opentelemetry/core": "^2.1.0",
    "@opentelemetry/exporter-logs-otlp-http": "^0.206.0",
    "@opentelemetry/exporter-metrics-otlp-http": "^0.206.0",
    "@opentelemetry/exporter-otlp-http": "^0.26.0",
    "@opentelemetry/exporter-trace-otlp-http": "^0.206.0",
    "@opentelemetry/host-metrics": "^0.36.2",
    "@opentelemetry/instrumentation-fetch": "^0.206.0",
    "@opentelemetry/instrumentation-http": "^0.206.0",
    "@opentelemetry/instrumentation-winston": "^0.51.0",
    "@opentelemetry/resources": "^2.1.0",
    "@opentelemetry/sdk-logs": "^0.206.0",
    "@opentelemetry/sdk-metrics": "^2.1.0",
    "@opentelemetry/sdk-node": "^0.206.0",
    "@opentelemetry/sdk-trace-base": "^2.1.0",
    "@opentelemetry/semantic-conventions": "^1.37.0",
    "@opentelemetry/winston-transport": "^0.17.0",
    "winston": "^3.18.3",
    "winston-transport": "^4.9.0",
    "zod": "^4.1.12"
  }
}
