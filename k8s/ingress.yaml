apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authentication-service
  namespace: authentication
  labels:
    app.kubernetes.io/name: authentication-service
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "2.4.0"
    app.kubernetes.io/component: networking
    app.kubernetes.io/part-of: authentication-platform
    app.kubernetes.io/managed-by: kubernetes
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # Health checks
    nginx.ingress.kubernetes.io/health-check-path: "/health"
    nginx.ingress.kubernetes.io/health-check-interval: "30s"
    nginx.ingress.kubernetes.io/health-check-timeout: "5s"

    # Connection settings optimized for high-performance authentication
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"

    # Optional: AWS Load Balancer Controller annotations
    # kubernetes.io/ingress.class: "alb"
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    # alb.ingress.kubernetes.io/healthcheck-path: /health
    # alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    # alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    # alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    # alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'

    # Optional: Cert-manager annotations for automatic TLS
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  # Optional: IngressClass for specific ingress controller
  # ingressClassName: nginx

  tls:
  - hosts:
    - auth.example.com
    secretName: authentication-tls

  rules:
  - host: auth.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: authentication-service
            port:
              number: 80

---
# Example TLS secret creation (replace with actual certificates)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: authentication-tls
#   namespace: authentication
# type: kubernetes.io/tls
# data:
#   tls.crt: <base64-encoded-certificate>
#   tls.key: <base64-encoded-private-key>