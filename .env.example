# .env.example
# All are optional - defaults to sensible values if not set

# Server Configuration
PORT=3000
NODE_ENV=development

# JWT Configuration
KONG_JWT_AUTHORITY=https://api.example.com
KONG_JWT_AUDIENCE=example-api
# KONG_JWT_ISSUER: Optional, defaults to KONG_JWT_AUTHORITY if not set
# Supports comma-separated values for multiple issuers
# KONG_JWT_ISSUER=http://sts.pvhcorp.com/, https://sts.windows.net/example
KONG_JWT_KEY_CLAIM_NAME=key
JWT_EXPIRATION_MINUTES=15

# Kong Configuration
# KONG_MODE specifies which Kong implementation to use:
# - API_GATEWAY: Traditional Kong API Gateway (self-hosted)
# - KONNECT: Kong Konnect (cloud-native with control planes)
KONG_MODE=API_GATEWAY
KONG_ADMIN_URL=http://localhost:8001
KONG_ADMIN_TOKEN=your-kong-admin-token-here
# The following Kong headers are configured with defaults and typically don't need to be changed:
# KONG_CONSUMER_ID_HEADER=x-consumer-id
# KONG_CONSUMER_USERNAME_HEADER=x-consumer-username
# KONG_ANONYMOUS_HEADER=x-anonymous-consumer

# OpenTelemetry Configuration (standard OTEL environment variables)

# Service identification (uses package.json name/version if not set)
OTEL_SERVICE_NAME=authentication-service
OTEL_SERVICE_VERSION=1.0.0

# Telemetry mode: console, otlp, or both (defaults to console)
# - console: logs only to console (safe for development)
# - otlp: sends to OpenTelemetry endpoints (production)
# - both: logs to console AND sends to endpoints
TELEMETRY_MODE=both

# OTLP Exporter endpoints (REQUIRED when TELEMETRY_MODE is 'otlp' or 'both')

# Base OTLP endpoint for automatic endpoint derivation (automatically appends /v1/traces, /v1/metrics, /v1/logs)
# OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318

# OR specify individual endpoints explicitly:
# OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4318/v1/traces
# OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:4318/v1/metrics
# OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://localhost:4318/v1/logs

# OTLP Exporter configuration (optional - these are the defaults)
# OTEL_EXPORTER_OTLP_TIMEOUT=30000
# OTEL_BSP_MAX_EXPORT_BATCH_SIZE=2048
# OTEL_BSP_MAX_QUEUE_SIZE=10000

# Note: Using 100% sampling - let the collector handle sampling for optimal performance

# API Documentation Configuration
# These variables control the OpenAPI specification metadata served at GET /

# API_CORS: CORS origin configuration (default: "*")
# Supports wildcard (*) or specific origins
# API_CORS=*
# API_CORS=https://example.com

# API_TITLE=Authentication Service API
# API_DESCRIPTION=High-performance authentication service with Kong integration, OpenTelemetry observability, and comprehensive health monitoring
# API_VERSION=1.0.0
# API_CONTACT_NAME=Example Corp
# API_CONTACT_EMAIL=api-support@example.com
# API_LICENSE_NAME=Proprietary
# API_LICENSE_IDENTIFIER=UNLICENSED

# Testing Configuration

# Playwright E2E Tests
# Base URL for Playwright E2E tests (defaults to service running on localhost:3000)
# API_BASE_URL=http://localhost:3000

# K6 Performance Testing Configuration
# Target service configuration for K6 tests
TARGET_HOST=localhost
TARGET_PORT=3000
TARGET_PROTOCOL=http
K6_TIMEOUT=30s

# K6 Test Execution Parameters
# Smoke test configuration
K6_SMOKE_VUS=3
K6_SMOKE_DURATION=3m

# Load test configuration
K6_LOAD_INITIAL_VUS=10
K6_LOAD_TARGET_VUS=20
K6_LOAD_RAMP_UP_DURATION=2m
K6_LOAD_STEADY_DURATION=5m
K6_LOAD_RAMP_DOWN_DURATION=2m

# Stress test configuration
K6_STRESS_INITIAL_VUS=50
K6_STRESS_TARGET_VUS=100
K6_STRESS_PEAK_VUS=200
K6_STRESS_DURATION=5m

# Spike test configuration
K6_SPIKE_BASELINE_VUS=10
K6_SPIKE_TARGET_VUS=100
K6_SPIKE_DURATION=3m

# Performance Thresholds (can be overridden for different environments)
# Response time thresholds (in milliseconds)
K6_HEALTH_P95_THRESHOLD=300
K6_HEALTH_P99_THRESHOLD=600
K6_TOKENS_P95_THRESHOLD=50
K6_TOKENS_P99_THRESHOLD=100
K6_METRICS_P95_THRESHOLD=30
K6_METRICS_P99_THRESHOLD=50

# Error rate thresholds (as decimal, e.g., 0.01 = 1%)
K6_ERROR_RATE_THRESHOLD=0.01
K6_STRESS_ERROR_RATE_THRESHOLD=0.05

# K6 Test Behavior Configuration
# Set to 'true' to make threshold violations non-blocking (tests continue running and report warnings instead of errors)
K6_THRESHOLDS_NON_BLOCKING=false

# Profiling Configuration
# PROFILING_ENABLED: Enable profiling capabilities (only works in development/staging/local environments)
# Uses Chrome DevTools integration - no file generation required
# PROFILING_ENABLED=true

